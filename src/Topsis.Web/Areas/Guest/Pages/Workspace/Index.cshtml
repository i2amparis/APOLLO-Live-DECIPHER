@page
@model Workspace.IndexModel
@using Topsis.Domain.Common
@{
    var currentStatus = Model.Data.Workspace.CurrentStatus;
    var hasReports = Model.Data.Workspace.IsFinalized() && Model.Data.Workspace.Reports?.Any() == true;
    var reportCount = Model.Data.Workspace.Reports?.Count() ?? 0;
    var noResultsMessage = string.Empty;
    var canVote = currentStatus == Domain.WorkspaceStatus.AcceptingVotes;
    var icon = string.Empty;
    switch (Model.Data.Workspace.CurrentStatus)
    {
        case Domain.WorkspaceStatus.Draft:
            noResultsMessage = "Workspace is not ready yet.";
            break;
        case Domain.WorkspaceStatus.Published:
            noResultsMessage = "Workspace voting not started yet.";
            break;
        case Domain.WorkspaceStatus.AcceptingVotes:
            icon = "how_to_vote";

            if (Model.Data.UserVoteId.HasValue)
            {
                noResultsMessage = reportCount > 0
                    ? $"Following the discussion and the tips provided, you can change your vote."
                    : $"Your vote has been registered. Please stay on this page while the rest of the participants finish voting. Thank you for your participation!";
            }
            else
            {
                noResultsMessage = $"Please vote.";
            }
            
            break;
        case Domain.WorkspaceStatus.Finalized:
        case Domain.WorkspaceStatus.FinalizedWithFeedback:
            icon = "hourglass_top";
            noResultsMessage = "Voting completed. The results will be published on this page shortly!";
            break;
        case Domain.WorkspaceStatus.Archived:
            icon = "inventory_2";
            noResultsMessage = "Workspace has archived.";
            break;
        default:
            break;
    }
}

@section HeadScripts
{
    <environment include="Development">
        <script src="~/lib/chartjs/chart.js"></script>
    </environment>
    <environment exclude="Development">
        <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.5.1/chart.min.js"
                integrity="sha512-Wt1bJGtlnMtGP0dqNFH1xlkLBNpEodaiQ8ZN5JLA5wpc1sUlk/O5uuOMNgvzddzkpvZ9GLyYNa8w2s7rqiTk5Q=="
                asp-fallback-src="~/lib/chartjs/chart.min.js"
                crossorigin="anonymous"
                referrerpolicy="no-referrer"></script>
    </environment>

    <script src="https://cdn.jsdelivr.net/npm/d3@7"></script>
}

<div class="row pb-2">
    <div class="col-md-8">
        <h2>@Model.Data.Workspace.Title</h2>
        <p class="lead">@Model.Data.Workspace.Description</p>
        @if (hasReports == false)
        {
            <p class="text-info">
                @if (string.IsNullOrEmpty(icon) == false)
                {
                    <span class="material-icons md-48">@icon</span>
                }
                @noResultsMessage
            </p>
        }

        @if (canVote)
        {
            @if(Model.Data.UserVoteId.HasValue)
            {
                <p>Change your vote <a href="@Url.Page("Vote", new { id = Model.Data.Workspace.Id.Hash() })">here</a>.</p>
            }
            else
            {
                <p>You can vote <a href="@Url.Page("Vote", new { id = Model.Data.Workspace.Id.Hash() })">here</a>.</p>
            }

            @if(reportCount > 1)
            {
                <div class="alert alert-info" role="alert">
                    <span class="text-small">Please note that the tips provided are only suggestions, and you are not obliged to adapt your votes. You can change your votes even if you didn’t receive specific tips.</span>
                </div>
            }
        }
    </div>
    <div class="col-md-4">
        <div aria-live="polite" aria-atomic="true" style="position: relative; min-height: 200px;">
            <div class="toast" style="position: absolute; top: 0; right: 0; min-width:150px;" data-autohide="false">
                <div class="toast-header">
                    <span class="material-icons">notifications</span>
                    <strong class="mr-auto"><span id="notifyTitle"></span></strong>
                    <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="toast-body">
                    <span id="notifyMessage"></span>
                </div>
            </div>
        </div>
    </div>
</div>

@if (hasReports)
{
    <div class="row">

        <div class="col-md-12">
            <h3>Prioritization</h3>
            <p class="lead">The votes of all participants are merged to create a unique solution that represents the solution of the group. In this diagram you may see how your results compare to this “group solution” for each of the options. A higher rating for an option indicates a higher priority/importance. A large difference in the two bars indicates a large disagreement between your votes and those of the rest of the participants. In some cases, a large difference may trigger a suggestion to adapt your vote in the next voting round, depending on the other participants as well.</p>

            <div class="col-md-5 float-md-right">
                <h5>Consensus</h5>
                <p class="text-secondary">The consensus indicates how close the results of the participants are. Hover over the shares for more information.</p>
                <p class="lead">
                    <span title="Your personal consensus (“me”) expresses (%) how close your votes were to the votes of the rest of the group. If your personal consensus is lower than the average consensus you will receive a tip to adapt certain votes and improve your consensus."
                        class="badge @Model.CompareReport.MyBadgeCls"
                          data-toggle="tooltip" data-placement="auto"
                        >Me: @(Model.CompareReport.MyConsensus)%
                    </span>&nbsp;
                    <span title="The average consensus (“avg”) expresses (%) how close the votes of all participants are to the group solution. A percentage above 85% usually represents a high consensus, between 70-85% an average consensus, and below 70% a low consensus among the group."
                        class="badge @Model.CompareReport.AverageBadgeCls"
                        data-toggle="tooltip" data-placement="auto"
                        >Avg: @(Model.CompareReport.AverageConsensus)%
                    </span>
                </p>
                
            </div>

            @if (Model.CompareReport.Tips.Any())
            {
            <div class="col-md-6 pt-2 text-center">
            
                @foreach (var item in Model.CompareReport.Tips)
                {
                    <div class='p-3 mb-2 text-light font-weight-bold' style="background-color: #10151B;">Your vote on alternative [@item.AlternativeTitle] had the largest difference from the group solution.</div>
                }
            
            </div>
            }

            
            <canvas id="chAlternatives"></canvas>
        </div>

    </div>

    <div class="row mt-5">
        <div class="col-md-12">
            <h3>Consensus</h3>
            <p class="lead">In this diagram you can observe how your personal consensus (first bar) compares to the rest of the participants (remaining bars) and the average consensus of all participants (red line). Please note that the votes are anonymized, so the rest of the participants will not be able to identify you.</p>
        </div>
        @*<div class="col-md-4">
            <canvas id="chCompareConsensus"></canvas>
        </div>*@

        <div class="col-md-8">
            <canvas id="chConsensus"></canvas>
        </div>

    </div>

    <div class="row mt-5">
        <div class="col-md-12">
            <h3>How stakeholders from different backgrounds compare</h3>
            <p class="lead">Stakeholders are grouped together based on their working capacity background (e.g., academia) to create a unique solution for their group. The results for the different categories (5 largest groups) are compared to the “group vote” which is the result that includes the perceptions of all stakeholders. The diagram sheds light on how the viewpoints of different categories of stakeholders differ. </p>
            <canvas id="chCategories"></canvas>
        </div>
    </div>

    @if (reportCount > 1)
    {
        <div class="row mt-5">
            <div class="col-md-12">
                <h3>Comparison with the previous rounds</h3>
                <p class="lead">In this diagram, you can see how the result of the “group solution” has changed between the rounds following the deliberations in between.</p>
                <canvas id="chReportComparison"></canvas>
            </div>
        </div>
    }
    
    @*<div class="row mt-5">
        <div class="col-md-12">
            <h3>Consensus</h3>
            <canvas id="chConsensusDegree"></canvas>
        </div>
    </div>*@
}
@section Scripts {

    <script>
        Chart.defaults.datasets.bar.minBarLength = 7;
        Chart.defaults.color = "#fff";

        // https://www.chartjs.org/docs/3.5.1/configuration/tooltip.html
        Chart.defaults.plugins.tooltip.enabled = false;

        @*let configCompareConsensus = JSON.parse('@Html.Raw(Model.ConsensusCompareReportJson)');
        let compareChart = new Chart(document.getElementById('chCompareConsensus'), configCompareConsensus);*@

            let jsHasReports = @(hasReports ? "true" : "false");
        if (jsHasReports) {
            let alternativesYLabels = JSON.parse('@Html.Raw(Model.AlternativesYLabelsJson)');
            let alternativesTicksCallback = function (value, idx) {
                return alternativesYLabels[idx];
            };

            let configAlternatives = JSON.parse('@Html.Raw(Model.AlternativesReportJson)');
            configAlternatives.options.scales['y'].ticks.callback = alternativesTicksCallback;

            let altChart = new Chart(document.getElementById('chAlternatives'), configAlternatives);

            let configConsensus = JSON.parse('@Html.Raw(Model.ConsensusReportJson)');
            let consensusChart = new Chart(document.getElementById('chConsensus'), configConsensus);

            let configCategories = JSON.parse('@Html.Raw(Model.CategoriesReportJson)');
            configCategories.options.scales['y'].ticks.callback = alternativesTicksCallback;
            let categoriesChart = new Chart(document.getElementById('chCategories'), configCategories);

            //let configConsensusDegree = JSON.parse('@Html.Raw(Model.ConsensusDegreeJson)');
            //let chConsensusDegreeChart = new Chart(document.getElementById('chConsensusDegree'), configConsensusDegree);

            if (@reportCount > 1) {
                let reportComparison = JSON.parse('@Html.Raw(Model.ReportComparisonJson)');
                let chReportComparison = new Chart(document.getElementById('chReportComparison'), reportComparison);
            }
        }

    </script>

    <environment include="Development">
        <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
        <script src="~/js/votingHub.js"></script>
    </environment>
    <environment exclude="Development">
        <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
        <script src="~/js/votingHub.min.js"></script>
    </environment>

    @* https://learn.microsoft.com/en-us/aspnet/signalr/overview/guide-to-the-api/hubs-api-guide-javascript-client#how-to-get-a-proxy-for-a-hub-class *@
    @* https://getbootstrap.com/docs/4.6/components/toasts/#options *@

    <script type="text/javascript">
        
        $(function(){
            let groupName = "@(Hubs.VotingHub.GetWorkspaceGroupName(Model.Data.Workspace.Id.Hash()))";
            let connection = connectToGroup("@(Hubs.VotingHub.RouteUrl)", groupName, function () {
                console.log(`Connected.`);
            });

            connection.onreconnecting(function () {
                console.log(`Connection lost. Reconnecting...`);
            });

            connection.onreconnected(function () {
                console.log("Reconnected.");
            });

            connection.on("workspace_status_changed", function (payload) {
                console.log(`Received message from 'workspace:${payload.workspaceId}' that status has changed to: ${payload.status}.`);
                location.reload();
            });

            connection.on("workspace_message", function (payload) {
                console.log(`Received 'message:${payload.message}' from 'workspace:${payload.workspaceId}'.`);
                
                if (payload) {
                    $('#notifyTitle').text(payload.title);
                    $('#notifyMessage').text(payload.message);
                    $('.toast').toast('show');
                }
            });

            $('.toast').toast({ delay: 3000 });

            $(function () {
                $('[data-toggle="tooltip"]').tooltip()
            })
        });
    </script>
}